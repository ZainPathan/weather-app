{"version":3,"sources":["reportWebVitals.ts","redux/modules/weather/types.ts","redux/modules/weather/reducer.ts","redux/modules/api/actions.ts","redux/modules/navigation/types.ts","redux/modules/navigation/actions.ts","core/utils/TemperatureConversions.ts","redux/modules/weather/actions.ts","redux/modules/temperature/types.ts","redux/modules/temperature/reducer.ts","redux/modules/temperature/actions.ts","redux/modules/navigation/reducer.ts","containers/MainContainer/styles/MainContainer.style.ts","components/molecules/Loader/styles/Loader.style.ts","components/molecules/Loader/index.ts","components/molecules/Loader/Loader.tsx","components/molecules/TemperatureSelection/styles/TemperatureSelection.style.ts","components/molecules/TemperatureSelection/index.ts","components/molecules/TemperatureSelection/TemperatureSelection.tsx","components/organisms/WeatherDetailsSection/styles/WeatherDetailsSection.style.ts","components/molecules/WeatherCard/styles/WeatherCard.style.ts","components/molecules/WeatherCard/index.ts","components/molecules/WeatherCard/WeatherCard.tsx","core/hooks/useWindowDimensions.ts","components/organisms/WeatherDetailsSection/index.ts","components/organisms/WeatherDetailsSection/WeatherDetailsSection.tsx","core/utils/getCardsIndexList.ts","core/constants.ts","components/atoms/ArrowNavigation/styles/ArrowNavigation.style.ts","components/atoms/ArrowNavigation/index.ts","components/atoms/ArrowNavigation/ArrowNavigation.tsx","components/organisms/BarGraph/index.ts","components/organisms/BarGraph/BarGraph.tsx","core/utils/DateTimeConversions.ts","containers/MainContainer/MainContainer.tsx","containers/MainContainer/index.ts","redux/modules/index.ts","redux/store/store.dev.ts","redux/index.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GET_WEATHER_DATA_REQUEST_START","GET_WEATHER_DATA_REQUEST_FAIL","GET_WEATHER_DATA_REQUEST_SUCCESS","INITIAL_STATE","loadingState","weatherData","reducer","state","action","type","payload","get","url","dispatch","config","method","Promise","resolve","reject","axios","headers","response","catch","error","UPDATE_CURRENT_CARD","UPDATE_MAX_CARD_COUNT","updateCurrentCard","updateMaxCardCount","convertTemperatureToCelsius","temperatureInKelvin","parseInt","convertTempFromCelsiusToFahrenheit","temperatureInCelsius","convertTemperatureToFahrenheit","getWeatherDataRequestStart","getWeatherDataRequestFail","getWeatherDataRequestSuccess","getWeatherData","formattedData","status","data","list","reduce","result","weather","index","momentDateObj","moment","dt_txt","momentDate","format","momentDateTimeHour","dateString","main","time","segments","temp","temperatureInFahrenheit","temperature","minTemperature","temp_min","maxTemperature","temp_max","count","date","Object","keys","length","UPDATE_TEMPERATURE_UNIT","temperatureUnit","updateTemperatureUnit","currentCardDate","currentCardIndex","maxCardCount","MainContainerStyles","createStyles","mainContainer","padding","flexGrow","barGraph","display","justifyContent","border","height","margin","useLoaderStyles","makeStyles","backdrop","zIndex","color","loadingText","marginLeft","Loader","props","classes","showLoader","Backdrop","className","open","CircularProgress","useTemperatureSelectionStyles","temperatureSelection","width","TemperatureSelection","handleTemperatureUnitChange","Grid","item","xs","FormControl","RadioGroup","row","name","defaultValue","value","onChange","event","FormControlLabel","control","Radio","label","useWeatherDetailsSectionStyles","weatherCards","flexWrap","flexDirection","alignItems","marginTop","marginBottom","useWeatherCardStyles","weatherCard","flex","selectedWeatherCard","WeatherCard","weatherDate","temperatureDetails","Card","variant","clsx","CardContent","Typography","component","getWindowDimensions","window","innerWidth","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","WeatherDetailsSection","cardsIndexList","maxCardsLength","getCardsIndexList","currentWeatherCards","map","toFixed","includes","useArrowNavigationStyles","arrowNavigation","cursor","backArrow","order","forwardArrow","hideIcon","visibility","disableArrow","pointerEvents","ArrowNavigation","handleArrowClick","direction","preventDefault","handleNavigation","ArrowBack","onClick","e","ArrowForward","BarGraph","graphData","ResponsiveContainer","BarChart","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","GetUpdatedDateInString","currentDateInString","isAdd","add","subtract","MainContainer","bind","this","console","log","updatedCardDetails","container","spacing","justify","Component","connect","navigation","bindActionCreators","Weather","Temperature","Navigation","withStyles","combineReducers","middlewares","thunk","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","store","createStore","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0986c382.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const GET_WEATHER_DATA_REQUEST_START: string = 'weather/get/REQUEST_START';\nexport const GET_WEATHER_DATA_REQUEST_FAIL: string = 'weather/get/REQUEST_FAIL';\nexport const GET_WEATHER_DATA_REQUEST_SUCCESS: string = 'weather/get/REQUEST_SUCCESS';\n","import { WeatherDataAction } from './actions';\nimport {\n    GET_WEATHER_DATA_REQUEST_FAIL,\n    GET_WEATHER_DATA_REQUEST_START,\n    GET_WEATHER_DATA_REQUEST_SUCCESS\n} from './types';\n\ntype WeatherDataState = {\n    loadingState: string,\n    weatherData: any\n};\n\nconst INITIAL_STATE: WeatherDataState = {\n    loadingState: 'UNINITIALIZED',\n    weatherData: null\n};\n\nexport const reducer = (\n    state: WeatherDataState = INITIAL_STATE,\n    action: WeatherDataAction\n) : WeatherDataState => {\n    switch(action.type) {\n        case GET_WEATHER_DATA_REQUEST_START:\n            return {\n                ...state,\n                loadingState: 'LOADING'\n            };\n        case GET_WEATHER_DATA_REQUEST_FAIL:\n            return {\n                ...state,\n                loadingState: 'ERROR'\n            }\n        case GET_WEATHER_DATA_REQUEST_SUCCESS:\n            return {\n                ...state,\n                loadingState: 'LOADED',\n                weatherData: action?.payload\n            }\n        default:\n            return state;\n    }\n};","import axios from 'axios';\n\nexport const request = (config: any) => (dispatch: Function) =>\n    new Promise((resolve, reject) => {\n        axios({\n            ...config,\n            headers: {\n                \"Access-Control-Allow-Origin\": \"*\",\n                \"Content-Type\": \"application/json\",\n            }\n        })\n            .then((response: any) => {\n                resolve(response);\n            })\n            .catch((error: any) => {\n                reject(error);\n            });\n    });\n\nexport const get = (url: string) => (dispatch: Function) =>\n    dispatch(\n        request({\n            url,\n            method: 'GET'\n        })\n    );\n","export const UPDATE_CURRENT_CARD: string = 'update/current/card';\nexport const UPDATE_MAX_CARD_COUNT: string = 'update/max/card/count';\n\nexport type NavigationAction = {\n    type: string\n    payload?: any\n};\n","import {\n    UPDATE_CURRENT_CARD,\n    UPDATE_MAX_CARD_COUNT\n} from './types';\n\nexport const updateCurrentCard = (payload: number) => ({\n    type: UPDATE_CURRENT_CARD,\n    payload\n});\n\nexport const updateMaxCardCount = (payload: number) => ({\n    type: UPDATE_MAX_CARD_COUNT,\n    payload\n});","export const convertTemperatureToCelsius = (temperatureInKelvin: string) => {\n    return (parseInt(temperatureInKelvin) - 273);\n}\n\nexport const convertTempFromCelsiusToFahrenheit = (temperatureInCelsius: number) => {\n    return ((temperatureInCelsius * 9/5 + 32));\n}\n\nexport const convertTemperatureToFahrenheit = (temperatureInKelvin: string) => {\n    return convertTempFromCelsiusToFahrenheit(convertTemperatureToCelsius(temperatureInKelvin));\n}","import {\n    GET_WEATHER_DATA_REQUEST_FAIL,\n    GET_WEATHER_DATA_REQUEST_START, GET_WEATHER_DATA_REQUEST_SUCCESS\n\n} from './types';\nimport { get } from '../api/actions';\nimport moment from 'moment';\nimport { updateMaxCardCount } from '../navigation/actions';\nimport {\n    convertTemperatureToCelsius,\n    convertTemperatureToFahrenheit\n} from '../../../core/utils/TemperatureConversions';\n\nconst GET_WEATHER_DATA_URL: string = '/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40';\n\nexport const getWeatherDataRequestStart = () => ({\n    type: GET_WEATHER_DATA_REQUEST_START\n});\n\nexport const getWeatherDataRequestFail = () => ({\n    type: GET_WEATHER_DATA_REQUEST_FAIL\n});\n\nexport const getWeatherDataRequestSuccess = (payload: any) => ({\n    type: GET_WEATHER_DATA_REQUEST_SUCCESS,\n    payload\n});\n\nexport const getWeatherData = () => (\n    dispatch: Function\n) => new Promise((resolve, reject) => {\n   dispatch(getWeatherDataRequestStart());\n\n   dispatch(get(GET_WEATHER_DATA_URL)).then((response: any) => {\n\n       let formattedData = {};\n\n       if(response.status === 200) {\n           // console.log('response: ', response.data);\n           const weatherData = response.data;\n           formattedData = weatherData.list.reduce((result: any, weather: any, index: number, list: any) => {\n               // console.log('reduce weather: ', weather);\n               const momentDateObj = moment(weather.dt_txt, 'YYYY-MM-DD HH:mm:ss', true);\n               const momentDate = momentDateObj.format('DD-MM-YYYY');\n               const momentDateTimeHour = momentDateObj.format('HH:mm');\n               const dateString = momentDateObj.format('D MMM YY');\n               // console.log('moment hour: ', momentDateObj.format('D MMM YY'));\n               // console.log('moment date; ', moment(weather.dt_txt, 'YYYY-MM-DD hh:mm:ss', true));\n\n               if(result[momentDate]) {\n                   result[momentDate] = {\n                       list: {\n                           ...result[momentDate].list,\n                           [momentDateTimeHour]: {\n                               ...weather.main,\n                               time: momentDateTimeHour\n                           }\n                       },\n                       segments: [\n                           ...result[momentDate].segments,\n                           ...[{\n                               temperatureInCelsius: convertTemperatureToCelsius(weather.main.temp),\n                               temperatureInFahrenheit: convertTemperatureToFahrenheit(weather.main.temp),\n                               time: momentDateTimeHour\n                           }]\n                       ],\n                       temperature: result[momentDate].temperature += weather.main.temp,\n                       minTemperature: result[momentDate].minTemperature += weather.main.temp_min,\n                       maxTemperature: result[momentDate].maxTemperature += weather.main.temp_max,\n                       count: result[momentDate].count += 1,\n                       date: momentDate,\n                       dateString\n                   }\n               } else {\n                   // result[momentDate] = {};\n                   result[momentDate] = {\n                       list: {\n                           [momentDateTimeHour]: {\n                               ...weather.main,\n                               time: momentDateTimeHour\n                           }\n                       },\n                       segments: [\n                           ...[{\n                               temperatureInCelsius: convertTemperatureToCelsius(weather.main.temp),\n                               temperatureInFahrenheit: convertTemperatureToFahrenheit(weather.main.temp),\n                               time: momentDateTimeHour\n                           }]\n                       ],\n                       temperature: weather.main.temp,\n                       minTemperature: weather.main.temp_min,\n                       maxTemperature: weather.main.temp_max,\n                       count: 1,\n                       date: momentDate,\n                       dateString\n                   }\n               }\n               return result;\n           }, {});\n\n           // console.log('formattedData: ', formattedData);\n           // console.log('formattedData: ', Object.keys(formattedData));\n       }\n\n       dispatch(updateMaxCardCount(Object.keys(formattedData).length));\n       dispatch(getWeatherDataRequestSuccess(formattedData));\n   }).catch((error: any) => {\n\n       dispatch(getWeatherDataRequestFail());\n   });\n});\n\nexport type WeatherDataAction = {\n    type: string\n    payload?: any\n}","export const UPDATE_TEMPERATURE_UNIT: string = 'update/temperatureUnit';","import { TemperatureUnitAction } from './actions';\nimport {\n    UPDATE_TEMPERATURE_UNIT\n} from './types';\n\ntype TemperatureUnitState = {\n    temperatureUnit: string\n};\n\nconst INITIAL_STATE: TemperatureUnitState = {\n    temperatureUnit: 'fahrenheit'\n};\n\nexport const reducer = (\n    state: TemperatureUnitState = INITIAL_STATE,\n    action: TemperatureUnitAction\n) : TemperatureUnitState => {\n    switch(action.type) {\n        case UPDATE_TEMPERATURE_UNIT:\n            return {\n                ...state,\n                temperatureUnit: action?.payload || 'fahrenheit'\n            };\n        default:\n            return state;\n    }\n};","import {\n    UPDATE_TEMPERATURE_UNIT,\n} from './types';\n\nexport const updateTemperatureUnit = (payload: string) => ({\n    type: UPDATE_TEMPERATURE_UNIT,\n    payload\n});\n\nexport type TemperatureUnitAction = {\n    type: string\n    payload?: string\n}","import {\n    UPDATE_CURRENT_CARD,\n    NavigationAction, UPDATE_MAX_CARD_COUNT\n} from './types';\nimport moment from 'moment';\n\ntype NavigationState = {\n    currentCardDate: string,\n    currentCardIndex: number,\n    maxCardCount: number\n};\n\nconst INITIAL_STATE: NavigationState = {\n    currentCardDate: moment().format('YYYY-MM-DD'),\n    currentCardIndex: 0,\n    maxCardCount: 0\n};\n\nexport const reducer = (\n    state: NavigationState = INITIAL_STATE,\n    action: NavigationAction\n) : NavigationState => {\n    switch(action.type) {\n        case UPDATE_CURRENT_CARD:\n            return {\n                ...state,\n                currentCardDate: action.payload.currentCardDate || moment().format('DD-MM-YYYY'),\n                currentCardIndex: action.payload.currentCardIndex || 0// ?.currentCardIndex || 0\n            };\n        case UPDATE_MAX_CARD_COUNT:\n            return {\n                ...state,\n                currentCardDate: moment().format('DD-MM-YYYY'),\n                maxCardCount: action?.payload || 0// ?.currentCardIndex || 0\n            };\n        default:\n            return state;\n    }\n};","import { createStyles } from '@material-ui/core';\n\nconst MainContainerStyles = () => createStyles({\n    mainContainer: {\n        // display: 'flex',\n        padding: 20,\n        flexGrow: 1\n    },\n    /*temperatureSelection: {\n        display: 'inline-flex',\n        justifyContent: 'center'\n    },*/\n    /*arrowNavigation: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'nowrap',\n        justifyContent: 'space-between',\n        '& .MuiSvgIcon-root': {\n            width: '1.5em',\n            height: '1.5em',\n            cursor: 'pointer'\n        }\n    },*/\n    /*weatherCards: {\n        // width: '100%',\n        display: 'inline-flex',\n        flexWrap: 'nowrap',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        alignItems: 'flex-start'\n    },\n    weatherCard: {\n        width: 300,\n        height: 200,\n    },*/\n    barGraph: {\n        display: 'inline-flex',\n        justifyContent: 'center',\n        border: '1px solid black',\n        height: 250,\n        margin: '0 15px 0 15px'\n    }\n});\n\nexport default MainContainerStyles;","import { makeStyles } from '@material-ui/core/styles';\n\nconst useLoaderStyles = makeStyles({\n    backdrop: {\n        zIndex: 9999,\n        color: '#fff'\n    },\n    loadingText: {\n        marginLeft: 10\n    }\n});\n\nexport default useLoaderStyles;","import Loader from './Loader';\n\nexport {\n    Loader\n};\n\nexport default Loader;","import React from 'react';\nimport {\n    Backdrop,\n    CircularProgress\n} from '@material-ui/core';\n\nimport useLoaderStyles from './styles/Loader.style';\n\ninterface LoaderProps {\n    showLoader: boolean\n}\n\nconst Loader = (props: LoaderProps) => {\n    const classes = useLoaderStyles();\n    const {\n        showLoader\n    } = props;\n\n    return (\n        <div>\n            <Backdrop\n                className={classes.backdrop}\n                open={showLoader}\n            >\n                <CircularProgress\n                    color=\"inherit\"\n                />\n                <div\n                    className={classes.loadingText}\n                >\n                    Loading...\n                </div>\n            </Backdrop>\n        </div>\n    );\n};\n\nexport default Loader;","import { makeStyles } from \"@material-ui/core\";\n\nconst useTemperatureSelectionStyles = makeStyles({\n    temperatureSelection: {\n        display: 'inline-flex',\n        justifyContent: 'center',\n        '& .MuiFormControl-root': {\n            width: '100%',\n            '& .MuiFormGroup-root': {\n                justifyContent: 'space-around'\n            }\n        }\n    }\n});\n\nexport default useTemperatureSelectionStyles;","import TemperatureSelection from './TemperatureSelection';\n\nexport {\n    TemperatureSelection\n};\n\nexport default TemperatureSelection;","import React from 'react';\nimport {\n    Grid,\n    FormControl,\n    FormControlLabel,\n    Radio,\n    RadioGroup\n} from '@material-ui/core';\n\nimport useTemperatureSelectionStyles from './styles/TemperatureSelection.style';\n\ninterface TemperatureSelectionProps {\n    temperatureUnit: string,\n    handleTemperatureUnitChange: Function\n}\n\nconst TemperatureSelection = (props: TemperatureSelectionProps) => {\n\n    const classes = useTemperatureSelectionStyles(props);\n    const {\n        temperatureUnit,\n        handleTemperatureUnitChange\n    } = props;\n\n    const onChange = (event: React.ChangeEvent, value: string) => {\n        // console.log('onChange event: ', event);\n        // console.log('onChange value: ', value);\n        handleTemperatureUnitChange(value);\n    }\n\n    return (\n        <Grid\n            item\n            xs={12}\n            className={classes.temperatureSelection}\n        >\n            <FormControl>\n                <RadioGroup\n                    row\n                    aria-label=\"temperature-selection\"\n                    name=\"temperature-selection\"\n                    defaultValue=\"celsius\"\n                    value={temperatureUnit}\n                    onChange={onChange}\n                >\n                    <FormControlLabel\n                        value=\"celsius\"\n                        control={\n                            <Radio\n                                data-testid=\"celsius-radio-button\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Celsius\"\n                    />\n                    <FormControlLabel\n                        value=\"fahrenheit\"\n                        control={\n                            <Radio\n                                data-testid=\"fahrenheit-radio-button\"\n                                color=\"secondary\"\n                            />\n                        }\n                        label=\"Fahrenheit\"\n                    />\n                </RadioGroup>\n            </FormControl>\n        </Grid>\n    )\n};\n\nexport default TemperatureSelection;","import { makeStyles } from '@material-ui/core';\n\nconst useWeatherDetailsSectionStyles = makeStyles({\n    weatherCards: {\n        // width: '100%',\n        display: 'inline-flex',\n        flexWrap: 'nowrap',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        alignItems: 'flex-start',\n        marginTop: 20,\n        marginBottom: 20\n    },\n    /*weatherCard: {\n        width: 225,\n        height: 175,\n        flex: '1 0 auto',\n        margin: '0 10px 0 10px'\n    },\n    selectedWeatherCard: {\n        border: '5px solid red'\n    }*/\n});\n\nexport default useWeatherDetailsSectionStyles;","import { makeStyles } from '@material-ui/core';\n\nconst useWeatherCardStyles = makeStyles({\n    weatherCard: {\n        width: 225,\n        height: 175,\n        flex: '1 0 auto',\n        margin: '0 10px 0 10px'\n    },\n    selectedWeatherCard: {\n        border: '5px solid red'\n    }\n});\n\nexport default useWeatherCardStyles;","import WeatherCard from './WeatherCard';\n\nexport {\n    WeatherCard\n};\n\nexport default WeatherCard;","import React from 'react';\nimport {\n    Card,\n    CardContent,\n    Typography\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport useWeatherCardStyles from './styles/WeatherCard.style';\n\ninterface WeatherCardProps {\n    currentCardIndex: number,\n    weatherDate: string,\n    temperatureDetails: string,\n    index: number\n}\n\nconst WeatherCard = ({currentCardIndex, weatherDate, temperatureDetails, index}: WeatherCardProps) => {\n    const classes = useWeatherCardStyles();\n\n    return (\n        <Card\n            variant=\"outlined\"\n            className={\n                (currentCardIndex === index ) ?\n                    clsx(classes.weatherCard, classes.selectedWeatherCard) :\n                    classes.weatherCard\n            }\n        >\n            <CardContent>\n                <Typography\n                    variant=\"h5\"\n                    component=\"h2\"\n                >\n                    Temperature:&nbsp;\n                    {temperatureDetails}\n                </Typography>\n                <br/>\n                <Typography\n                    variant=\"h5\"\n                    component=\"h2\"\n                >\n                    Date: {weatherDate}\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default WeatherCard;\n// export {};","import { useEffect, useState } from 'react';\n\nconst getWindowDimensions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n};\n\nconst useWindowDimensions = () => {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions);\n\n    useEffect(() => {\n        const handleResize = () => {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        }\n    }, []);\n\n    return windowDimensions;\n};\n\nexport default useWindowDimensions;\n\n","import WeatherDetailsSection from './WeatherDetailsSection';\n\nexport {\n    WeatherDetailsSection\n};\n\nexport default WeatherDetailsSection;","import React from 'react';\nimport {\n    // Button,\n    // Card,\n    // CardActions,\n    // CardContent,\n    Grid,\n    // Typography\n} from '@material-ui/core';\n// import clsx from 'clsx';\nimport useWeatherDetailsSectionStyles from './styles/WeatherDetailsSection.style';\nimport WeatherCard from '../../molecules/WeatherCard';\nimport {\n    convertTemperatureToCelsius,\n    convertTempFromCelsiusToFahrenheit\n} from '../../../core/utils/TemperatureConversions';\nimport {\n    CELSIUS_SYMBOL,\n    FAHRENHEIT_SYMBOL\n} from '../../../core/constants';\nimport useWindowDimensions from '../../../core/hooks/useWindowDimensions';\nimport { getCardsIndexList } from '../../../core/utils/getCardsIndexList';\n\ninterface WeatherDetailsSectionProps {\n    weatherData: any,\n    temperatureUnit: string,\n    currentCardIndex: number\n}\n\nconst WeatherDetailsSection = ({weatherData, temperatureUnit, currentCardIndex}: WeatherDetailsSectionProps) => {\n\n    const classes = useWeatherDetailsSectionStyles();\n    const { width } = useWindowDimensions();\n    const cardsIndexList = getCardsIndexList(\n                                width,\n                                currentCardIndex,\n                                weatherData ? Object.keys(weatherData).length : 0\n                           );\n\n    const currentWeatherCards = weatherData &&\n        Object.keys(weatherData).map((date, index) => {\n            const totalTemperatures = weatherData[date].temperature,\n                count = weatherData[date].count,\n                temperatureInKelvin = (totalTemperatures/count).toFixed(2),\n                temperatureInCelsius = convertTemperatureToCelsius(temperatureInKelvin),\n                temperatureInFahrenheit = convertTempFromCelsiusToFahrenheit(temperatureInCelsius), // (temperatureInCelsius * 9/5 + 32),\n                weatherDate = weatherData[date].dateString,\n                temperatureDetails = temperatureUnit === 'celsius' ?\n                                        `${temperatureInCelsius}${CELSIUS_SYMBOL}` :\n                                            `${temperatureInFahrenheit}${FAHRENHEIT_SYMBOL}`;\n\n            const showCard = cardsIndexList.includes(index);\n\n            return showCard ? (\n                <WeatherCard\n                    key={date}\n                    currentCardIndex={currentCardIndex}\n                    weatherDate={weatherDate}\n                    temperatureDetails={temperatureDetails}\n                    index={index}\n                />\n                /*<Card\n                    key={date}\n                    variant=\"outlined\"\n                    className={\n                        (currentCardIndex === index ) ?\n                            clsx(classes.weatherCard, classes.selectedWeatherCard) :\n                                classes.weatherCard\n                    }\n                >\n                    <CardContent>\n                        <Typography\n                            variant=\"h5\"\n                            component=\"h2\"\n                        >\n                            Temperature:&nbsp;\n                            {temperatureDetails}\n                            {/!*<br/>\n                            <br/>\n                            Date: {weatherDate}*!/}\n                        </Typography>\n                        <br/>\n                        <Typography\n                            variant=\"h5\"\n                            component=\"h2\"\n                        >\n                            Date: {weatherDate}\n                        </Typography>\n                    </CardContent>\n                </Card>*/\n            ) : null\n    });\n\n    return (\n        <Grid\n            item\n            xs={12}\n            className={classes.weatherCards}\n        >\n            {currentWeatherCards}\n            {/*<Card\n                variant=\"outlined\"\n                className={classes.weatherCard}\n            >\n                <CardContent>\n                    <Typography\n                        variant=\"h5\"\n                        component=\"h2\"\n                    >\n                        Weather Data\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => {\n                            // handleSensorButtonClick(sensorData);\n                        }}\n                        size=\"large\"\n                    >\n                        Button text\n                    </Button>\n                </CardActions>\n            </Card>\n            <Card\n                variant=\"outlined\"\n                className={classes.weatherCard}\n            >\n                <CardContent>\n                    <Typography\n                        variant=\"h5\"\n                        component=\"h2\"\n                    >\n                        Weather Data\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => {\n                            // handleSensorButtonClick(sensorData);\n                        }}\n                        size=\"large\"\n                    >\n                        Button text\n                    </Button>\n                </CardActions>\n            </Card>\n            <Card\n                variant=\"outlined\"\n                className={classes.weatherCard}\n            >\n                <CardContent>\n                    <Typography\n                        variant=\"h5\"\n                        component=\"h2\"\n                    >\n                        Weather Data\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => {\n                            // handleSensorButtonClick(sensorData);\n                        }}\n                        size=\"large\"\n                    >\n                        Button text\n                    </Button>\n                </CardActions>\n            </Card>*/}\n        </Grid>\n    );\n};\n\nexport default WeatherDetailsSection;","export const getCardsIndexList = (width: number, currentCardIndex: number, maxCardsLength: number = 0) => {\n    // let numberOfCardsToBeShown = 3;\n    let cardsIndexList: Array<number> = [];\n\n    if(width < 600) {\n        // numberOfCardsToBeShown = 1;\n        cardsIndexList = [currentCardIndex];\n    } else if(width < 960) {\n        // numberOfCardsToBeShown = 2;\n        if(currentCardIndex === 0) {\n            cardsIndexList = [currentCardIndex, currentCardIndex + 1];\n        } else if(currentCardIndex === maxCardsLength - 1) {\n            cardsIndexList = [currentCardIndex - 1, currentCardIndex];\n        } else {\n            cardsIndexList = [currentCardIndex, currentCardIndex + 1];\n        }\n    } else {\n        if(currentCardIndex === 0) {\n            cardsIndexList = [currentCardIndex, currentCardIndex + 1, currentCardIndex + 2];\n        } else if(currentCardIndex === maxCardsLength - 1) {\n            cardsIndexList = [currentCardIndex - 2, currentCardIndex - 1, currentCardIndex];\n        } else {\n            cardsIndexList = [currentCardIndex - 1, currentCardIndex, currentCardIndex + 1];\n        }\n    }\n    return cardsIndexList;\n}","export const CELSIUS_SYMBOL = '\\xB0C';\nexport const FAHRENHEIT_SYMBOL = '\\xB0F';","import { makeStyles } from '@material-ui/core';\n\nconst useArrowNavigationStyles = makeStyles({\n    arrowNavigation: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'nowrap',\n        justifyContent: 'space-between',\n        '& .MuiSvgIcon-root': {\n            width: '1.5em',\n            height: '1.5em',\n            cursor: 'pointer',\n            color: '#3f51b5'\n        }\n    },\n    backArrow: {\n        justifyContent: 'flex-start',\n        order: 1\n    },\n    forwardArrow: {\n        justifyContent: 'flex-end',\n        order: 2\n    },\n    hideIcon: {\n        visibility: 'hidden'\n    },\n    disableArrow: {\n        cursor: 'not-allowed !important',\n        pointerEvents: 'all'\n    }\n});\n\nexport default useArrowNavigationStyles;","import ArrowNavigation from './ArrowNavigation';\n\nexport {\n    ArrowNavigation\n};\n\nexport default ArrowNavigation;","import React from 'react';\nimport {\n    ArrowBack as ArrowBackIcon,\n    ArrowForward as ArrowForwardIcon\n} from '@material-ui/icons';\nimport { Grid } from '@material-ui/core';\nimport useArrowNavigationStyles from './styles/ArrowNavigation.style';\n// import clsx from 'clsx';\n\ninterface ArrowNavigationProps {\n    handleNavigation: Function,\n    currentCardIndex: number,\n    maxCardCount: number\n}\n\n\nconst ArrowNavigation = (props: ArrowNavigationProps) => {\n\n    const classes = useArrowNavigationStyles(props);\n\n    const handleArrowClick = (event: React.MouseEvent, direction: string) => {\n        // console.log('handleArrowClick event: ', event);\n        // console.log('handleArrowClick direction: ', direction);\n        switch(direction) {\n            case 'back':\n                if((props.currentCardIndex === 0)) {\n                    event.preventDefault();\n                    return null;\n                }\n                break;\n            case 'forward':\n                if((props.currentCardIndex === (props.maxCardCount - 1))) {\n                    event.preventDefault();\n                    return null;\n                }\n                break;\n        }\n        props.handleNavigation(direction);\n    }\n\n    // console.log('props.currentCardIndex: ', props.currentCardIndex);\n    // console.log('props.currentCardIndex !== 0: ', props.currentCardIndex !== 0);\n    // console.log('props.maxCardCount: ', props.maxCardCount);\n    // console.log('props.currentCardIndex === (props.maxCardCount - 1): ',props.currentCardIndex === (props.maxCardCount - 1));\n\n    return (\n        <Grid\n            item\n            xs={12}\n            className={classes.arrowNavigation}\n        >\n            {\n                <ArrowBackIcon\n                    data-testid=\"back-arrow\"\n                    className={\n                        (props.currentCardIndex === 0) ?\n                            classes.hideIcon : ''\n                    }\n                    onClick={(e: React.MouseEvent) => handleArrowClick(e, 'back')}\n                />\n            }\n            {\n                <ArrowForwardIcon\n                    data-testid=\"forward-arrow\"\n                    className={\n                        (props.currentCardIndex === (props.maxCardCount - 1)) ?\n                            (classes.hideIcon) : ''\n                    }\n                    onClick={(e: React.MouseEvent) => handleArrowClick(e, 'forward')}\n                />\n            }\n        </Grid>\n    )\n};\n\nexport default ArrowNavigation;","import BarGraph from './BarGraph';\n\nexport {\n    BarGraph\n};\n\nexport default BarGraph;","import React from 'react';\nimport {\n    BarChart,\n    Bar,\n    // Cell,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer\n} from 'recharts';\n\ninterface BarGraphProps {\n    weatherData: any,\n    currentCardDate: string,\n    temperatureUnit: string\n}\n\nconst BarGraph = ({weatherData, currentCardDate, temperatureUnit}: BarGraphProps) => {\n    const graphData = weatherData && weatherData[currentCardDate].segments;\n\n    return (weatherData &&\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n                width={500}\n                height={300}\n                data={graphData}\n                margin={{\n                    top: 5,\n                    right: 30,\n                    left: 20,\n                    bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                    // label=\"Time (in 24hr format)\"\n                    dataKey=\"time\"\n                    // padding={{ left: 30, right: 30 }}\n                />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                {temperatureUnit === 'celsius' && <Bar dataKey=\"temperatureInCelsius\" fill=\"#3f50b5\" />}\n                {/*{temperatureUnit === 'fahrenheit' && <Bar dataKey=\"temperatureInFahrenheit\" fill=\"#ab003c\" />}*/}\n                {temperatureUnit === 'fahrenheit' && <Bar dataKey=\"temperatureInFahrenheit\" fill=\"#f50057\" />}\n            </BarChart>\n        </ResponsiveContainer>\n    );\n};\n\nexport default BarGraph;\n","import moment from 'moment';\n\nexport const GetUpdatedDateInString = (currentDateInString: string, isAdd: boolean) => {\n    const momentDate = moment(currentDateInString, 'DD-MM-YYYY');\n    if(isAdd) {\n        return momentDate.add(1, 'd').format('DD-MM-YYYY');\n    } else {\n        return momentDate.subtract(1, 'd').format('DD-MM-YYYY');\n    }\n}","import React, { Component } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { ReducerState } from '../../redux/modules';\nimport { actions as Weather } from '../../redux/modules/weather';\nimport { actions as Temperature } from '../../redux/modules/temperature';\nimport { actions as Navigation } from '../../redux/modules/navigation';\nimport {\n    Grid,\n    withStyles,\n    WithStyles\n} from '@material-ui/core';\nimport MainContainerStyles from './styles/MainContainer.style';\nimport Loader from '../../components/molecules/Loader';\nimport TemperatureSelection from '../../components/molecules/TemperatureSelection';\nimport WeatherDetailsSection from '../../components/organisms/WeatherDetailsSection';\nimport ArrowNavigation from '../../components/atoms/ArrowNavigation';\nimport BarGraph from '../../components/organisms/BarGraph';\nimport { GetUpdatedDateInString } from '../../core/utils/DateTimeConversions';\n\n\ninterface MainContainerProps extends WithStyles<typeof MainContainerStyles> {\n    loadingState: string,\n    weatherData: any,\n    temperatureUnit: string\n    getWeatherData: Function,\n    updateTemperatureUnit: Function,\n    currentCardDate: string,\n    currentCardIndex: number,\n    maxCardCount: number,\n    updateCurrentCard: Function\n}\n\nclass MainContainer extends Component<MainContainerProps, {}> {\n\n    constructor(props: MainContainerProps) {\n        super(props);\n\n        this.handleTemperatureUnitChange = this.handleTemperatureUnitChange.bind(this);\n        this.handleNavigation = this.handleNavigation.bind(this);\n    }\n\n    componentDidMount() {\n        const {\n            getWeatherData\n        } = this.props;\n\n        getWeatherData().then(() => {\n            console.log('Obtained Weather data');\n        });\n    }\n\n    handleTemperatureUnitChange(value: string) {\n        const {\n            updateTemperatureUnit\n        } = this.props;\n\n        console.log('handleTemperatureUnitChange: ', value);\n        updateTemperatureUnit(value);\n    }\n\n    handleNavigation(direction: string) {\n        const {\n            currentCardIndex,\n            currentCardDate,\n            updateCurrentCard\n        } = this.props;\n\n        const updatedCardDetails = direction === 'forward' ?\n                ({\n                    currentCardIndex: currentCardIndex + 1,\n                    currentCardDate: GetUpdatedDateInString(currentCardDate, true)\n                }) : (direction === 'back' ?\n                    ({\n                        currentCardIndex: (currentCardIndex - 1),\n                        currentCardDate: GetUpdatedDateInString(currentCardDate, false)\n                    }) : null);\n\n        updatedCardDetails && updateCurrentCard(updatedCardDetails);\n    }\n\n    render() {\n\n        const {\n            classes,\n            weatherData,\n            loadingState,\n            temperatureUnit,\n            currentCardDate,\n            currentCardIndex,\n            maxCardCount\n        } = this.props;\n        return (\n            <>\n                {loadingState === 'LOADING' ?\n                    (<Loader showLoader={true} />) :\n                        (<div className={classes.mainContainer}>\n                            <Grid\n                                container\n                                spacing={2}\n                                direction=\"row\"\n                                justify=\"center\"\n                                alignItems=\"flex-start\"\n                            >\n                                <TemperatureSelection\n                                    temperatureUnit={temperatureUnit}\n                                    handleTemperatureUnitChange={this.handleTemperatureUnitChange}\n                                />\n                                <ArrowNavigation\n                                    handleNavigation={this.handleNavigation}\n                                    currentCardIndex={currentCardIndex}\n                                    maxCardCount={maxCardCount}\n                                />\n                                <WeatherDetailsSection\n                                    weatherData={weatherData}\n                                    temperatureUnit={temperatureUnit}\n                                    // currentCardDate={currentCardDate}\n                                    currentCardIndex={currentCardIndex}\n                                />\n                                <Grid\n                                    item\n                                    xs={12}\n                                    className={classes.barGraph}\n                                >\n                                    <BarGraph\n                                        weatherData={weatherData}\n                                        currentCardDate={currentCardDate}\n                                        temperatureUnit={temperatureUnit}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </div>)\n                }\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state: ReducerState) => ({\n    loadingState: state.weather.loadingState,\n    weatherData: state.weather.weatherData,\n    temperatureUnit: state.temperature.temperatureUnit,\n    currentCardDate: state.navigation.currentCardDate,\n    currentCardIndex: state.navigation.currentCardIndex,\n    maxCardCount: state.navigation.maxCardCount\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n    getWeatherData: Weather.getWeatherData,\n    updateTemperatureUnit: Temperature.updateTemperatureUnit,\n    updateCurrentCard: Navigation.updateCurrentCard\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(MainContainerStyles)(MainContainer));\n","import MainContainer from './MainContainer';\n\nexport {\n    MainContainer\n};\n\nexport default MainContainer;","import { combineReducers } from 'redux';\n\nimport { reducer as weather } from './weather';\nimport { reducer as temperature } from './temperature';\nimport { reducer as navigation } from './navigation';\n\nconst reducer = combineReducers({\n    weather,\n    temperature,\n    navigation\n});\n\nexport const rootReducer = (state: any, action: any) => {\n    return reducer(state, action);\n};\n\nexport type ReducerState = ReturnType<typeof rootReducer>","import thunk from 'redux-thunk';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { rootReducer } from '../modules';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?: typeof compose\n    }\n}\n\nconst middlewares = [thunk];\nconst middlewareEnhancer = applyMiddleware(...middlewares);\n\nconst enhancers = [middlewareEnhancer];\nconst composedEnhancers = composeWithDevTools(...enhancers);\n\nexport default createStore(rootReducer, undefined, composedEnhancers);","import store from './store';\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport MainContainer from './containers/MainContainer';\nimport { Provider } from 'react-redux';\nimport store from './redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <MainContainer />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}